<template>
    <view class="page" id="page">
      <!-- canvas 必须有 canvas-id ，否则display:none-->
      <canvas   @longpress="handleSaveImage"  class="canvas" canvas-id="canvas" style="height:{{cHeight}}">

      </canvas>
      <image

        src="{{url}}step-share-bg.png" class="bg" wx:if="sc"/>

      <view class="avatar-wrap">
        <view class="user-avatar">
          <open-data type="userAvatarUrl"></open-data>
        </view>
        <view class="user-nick">
          <open-data type="userNickName"></open-data>
        </view>
      </view>
      <view class="page-content">
        <view>
          我已在“麦”向健康每一天
        </view>
        <view class="step-wrap">
          迈出
          <view class="step">
            {{stepStr}}
          </view>
          步
        </view>
        <view>
          跟我一起来“麦”向健康吧！
        </view>
      </view>
      <view class="save-link">
        长按保持图片
      </view>
      <view class="btn-group">
        <cover-view>
          <button class="btn"
                  open-type="share">
            show给好友看
          </button>
        </cover-view>
        <cover-view>
          <button class="btn" @tap="handleReturn">
            返回
          </button>
        </cover-view>

      </view>

    </view>
</template>

<script>
import wepy from 'wepy';
import {numberWithCommas} from '../../utils/common'

export default class StepShare extends wepy.page {
  config = {}
  components = {}

  data = {
    url: '',
    step: 12345,
    sc:true,
    cHeight:'100%'
  }
  computed = {
    stepStr() {
      return numberWithCommas(this.step, 4)
    }
  }

  getScreenShot(){
    const statusBarHeight = 64
    const q = wx.createSelectorQuery()
    const page = q.select('#page')
    const url = this.url
    const that = this
    wx.getSystemInfo({

      success: function(res) {
        let clientHeight = res.windowHeight
        let clientWidth = res.windowWidth
        let ratio = 750 / clientWidth
        let height = clientHeight * ratio

        console.log(res , clientHeight , clientWidth , ratio , height)
        // return
        const w = res.screenWidth
        const h = res.screenHeight
        that.cHeight = h  + 'px'
        const statusBarHeight = 0
        console.log(w, h)
        const ctx = wx.createCanvasContext('canvas')

        //draw bg
        const imageUrl = `${url}step-share-bg.png`
        ctx.drawImage(imageUrl , 0 , 0 , w , h )

        // ctx.rect(0 , 0 , w , h)

        // ctx.draw(false)
        // this.sc = false
        // return;
        ctx.draw(false , ()=>{
          console.log('draw ,comper' , w, h )
          const obj = {
            x:0,
            y:0,
            width:w ,
            height:h    + statusBarHeight,
            // destWidth:w * 5,
            // destHeight:h * 12,
            canvasId:'canvas',
            quality:1,
            success:tempFilePath=>{
              console.log('file path' , tempFilePath)
              const urls = [tempFilePath.tempFilePath]
              wx.previewImage({
                urls:urls,
                success:()=>{
                  console.log("success")
                },
                fail:()=>{
                  console.log("fail")
                }
              })
            }
          }


          wx.canvasToTempFilePath(obj, this)
        })

      }
    })
return
    page.boundingClientRect(rect => {
      const w = rect.width
      const h = rect.height
      console.log(w, h)
      const ctx = wx.createCanvasContext('canvas')

      //draw bg
      const imageUrl = `${this.url}step-share-bg.png`
      ctx.drawImage(imageUrl , 0 , 0 , w , h  + statusBarHeight)

      // ctx.rect(0 , 0 , w , h)

      // ctx.draw(false)
      this.sc = false
      // return;
      ctx.draw(false , ()=>{
        console.log('draw ,comper' , w, h )
        const obj = {
          x:0,
          y:0,
          width:w ,
          height:h    + statusBarHeight,
          // destWidth:w,
          // destHeight:h,
          canvasId:'canvas',
          quality:1,
          success:tempFilePath=>{
            console.log('file path' , tempFilePath)
            const urls = [tempFilePath.tempFilePath]
            wx.previewImage({
              urls:urls,
              success:()=>{
                console.log("success")
              },
              fail:()=>{
                console.log("fail")
              }
            })
          }
        }


        wx.canvasToTempFilePath(obj, this)
      })
    }).exec()
  }
  methods = {
    handleShow() {

    },
    handleReturn() {
      this.getScreenShot()
      return
      wx.navigateBack({
        delta: 1
      })
    },
    handleSaveImage() {
      console.log('you press')

      this.getScreenShot()

      return
      let q = wx.createSelectorQuery()
      let page = q.select('#page')
      if (!page) {
        console.log('page')
      } else {
        console.log(page)
      }
      page.boundingClientRect(rect => {
        let w = rect.width
        let h = rect.height
        console.log(w, h)
        const ctx = wx.createCanvasContext('canvas')

        ctx.setFillStyle('red')
        ctx.fillRect(10, 10, 150, 100)
        ctx.fillRect(50, 50, 150, 100)
        ctx.draw(false, () => {
          console.log('draw ,comper')
          const obj = {
            x: 0,
            y: 0,
            width: w,
            height: h,

            canvasId: 'canvas',
            success: tempFilePath => {
              console.log('file path', tempFilePath.tempFilePath)
              const urls = [tempFilePath.tempFilePath]
              wx.previewImage({
                urls: urls
              })
            }
          }
          wx.canvasToTempFilePath(obj, this)
        })

        // ctx.rect(0 , 0 , w , h)
        // ctx.draw(false , ()=>{
        //   console.log('draw ,comper' , w,h )
        //   const obj = {
        //     canvasId:'canvas',
        //     success:tempFilePath=>{
        //       console.log('file path' , tempFilePath)
        //       const urls = [tempFilePath.tempFilePath]
        //       wx.previewImage({
        //         urls:urls,
        //         success:()=>{
        //           console.log("success")
        //         },
        //         fail:()=>{
        //           console.log("fail")
        //         }
        //       })
        //     }
        //   }
        //
        //
        //   wx.canvasToTempFilePath(obj, this)
        // })
      }).exec()

    }
  }

  events = {}

  onLoad() {
    this.url = this.$parent.globalData.url
  };

  onShareAppMessage(obj) {
    console.log('onShareAppMessage', obj)

    return obj
  }

  // Other properties
}
</script>



<style lang="scss">
  @import "../../css/variables";

  $font-size:30rpx;
  $pageHeight:667-$statusBarHeight;
.page{
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: stretch;
  .bg{
    width: 100%;
    height: 100%;
  }

  .canvas{
    width: 100%;
    /*height: 100%;*/
    height: 1334rpx;
    position: absolute;
    display: block;
    background-color: transparent;
    /*opacity: 0;*/
  }
  .avatar-wrap{
    position: absolute;
    /*top:20.99%;
        top:percentage((140 -$statusBarHeight)/(667-$statusBarHeight));
    */

    top:13.32%;
    left:50%;
    transform: translateX(-50%);
    height: 232rpx;
    width: 232rpx;

    .user-avatar{
      height: 232rpx;
      width: 232rpx;
      border-radius: 232rpx;
      overflow: hidden;
    }
    .user-nick{
      position: absolute;
      top: 100%;
      left:50%;
      transform: translate(-50% , 10rpx);
      font-weight: bold;
    }
  }

  .page-content {
    position: absolute;
    top:percentage((286 - $statusBarHeight)/$pageHeight);
    left:50%;
    transform: translateX(-50%);
    white-space: nowrap;
    font-size:  $font-size;
    font-weight: bold;

    >view{
      margin-top: percentage(8/$pageHeight);
    }
    .step-wrap {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
      .step{
        font-size:  $font-size + 30rpx;
        color:#DD0330;
      }
    }
  }

  .save-link {
    position: absolute;
    top:percentage((508 - $statusBarHeight)/$pageHeight);
    left:50%;
    transform: translateX(-50%);
    color:white;
    font-size:26rpx;
    text-decoration: underline;
    word-spacing: 20rpx;
    text-align: center;
  }

  .btn-group {
    position: absolute;
    top:percentage((572 - $statusBarHeight)/$pageHeight);
    display: flex;
    flex-direction: row;
    width: 100%;

    justify-content: space-around;

    >cover-view{
      width: 100%;
      padding:0;
      margin: 0;
      height: 100%;
      &:first-child{
        width: 308rpx;
      }
      &:last-child{
        width: 214rpx;
      }

      cover-view{
        width: 100%;
        padding:0;
        margin: 0;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content:center;

        border-radius: 74rpx;
        font-size: 36rpx;
        font-weight: bolder;
        color: #009844;
      }
    }

    .wx-button-cover-view-wrapper{
      position: relative;
      .wx-button-cover-view-inner{
        position: absolute;
        left:50%;
        top:50%;
        transform: translate(-50% , -50%);
      }
    }
    button{
      margin: 0;
      padding: 0;

      height: 74rpx;
      display: flex;
      align-items: center;
      justify-content:center;
      border-radius: 74rpx;


      font-size: 36rpx;
      font-weight: bolder;
      color: #009844;


    }
  }

}
</style>
