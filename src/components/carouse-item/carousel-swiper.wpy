<template>
  <view
    @touchstart="handleTouchStart"
    @touchend="handleTouchEnd"
    class="carousel-swiper carousel-swiper-external">
    <repeat key="url"
            index="index"
            item="image"
            for="{{loopImages}}">

      <!--0 1 2(current) 3 4 -->
      <view
        class="image-wrap  {{index == 4 ? 'image-next-hidden' : ''}} {{index == 0 ? 'image-pre-hidden' : ''}} {{index == 3 ? 'image-next' : ''}} {{index == 1 ? 'image-pre' : ''}} {{index == 2 ? 'image-current' : ''}} ">
        <image src="{{image.url}}"

               class="bg"/>

        <image src="{{image.icon}}"
               class="icon"
               wx:if="{{2===index && !image.locked}}"/>

        <view
          class="step-content {{2 !==index ? 'not-current' : ''}} {{image.locked ? 'locked':''}}">
          <view class="step-wrap"
                style="visibility: {{2 !==index ? 'visible' : 'hidden'}}">
            <view class="step">
              {{image.step}}
            </view>
            <view>
              步
            </view>

          </view>
          <image wx:if="{{image.locked}}" src="{{url}}home-locked.png" class="lock"/>
        </view>

      </view>
    </repeat>
    <image class="prev-btn"
           @tap="hanleLeft"
           src="{{url}}carousel-swiper-left-btn.png"/>
    <image class="next-btn"
           @tap="hanleRight"
           src="{{url}}carousel-swiper-right-btn.png"/>
  </view>
</template>

<script>
  import wepy from 'wepy'
  const app = getApp()
  // const url = './'
  export default class CarouselSwiper extends wepy.component {
    components = {}
    externalClasses= ['carousel-swiper-external']
    onLoad(){
      this.url = wepy.$instance.globalData.url
    }

    data = {
      startX: 0,
      endX: 0,
      url: ''
    }


    // getImageClass(index){
    //   let cs = ''
    //   if(index == this.selected){
    //     cs = 'image-current'
    //   }else if(index == (this.selected + 1)){
    //     cs = 'image-next'
    //   }else if(index == (this.selected - 1)){
    //     cs = 'image-pre'
    //   }else if(index > (this.selected + 1)){
    //     cs = 'image-next-hidden'
    //   }else if(index < (this.selected - 1)){
    //     cs = 'image-pre-hidden'
    //   }
    //
    //   return cs
    // }

    methods = {
      hanleLeft(){
        // if (this.selected < (this.images.length - 1)) {
        //   // console.log('move left')
        //
        //   // this.moveRight();
        //   this.selected++
        // }
        this.selected = (this.selected + 1) % this.images.length


      },
      hanleRight(){
        // if (this.selected > 0) {
        //   // console.log('move right')
        //   // this.moveLeft();
        //   this.selected--
        // }


        this.selected = (this.selected - 1 + this.images.length) % this.images.length
      },
      handleTouchStart(e) {

        // console.log(e)
        if(!e.changedTouches || e.changedTouches.length === 0){
          return
        }
        var startX = e.changedTouches[0].pageX
        this.startX = startX
        // this.setData({
        //   startX: startX
        // })
      },
      handleTouchEnd(e) {
        // console.log(e)
        if(!e.changedTouches || e.changedTouches.length === 0){
          return
        }
        var that = this
        var endX = e.changedTouches[0].pageX
        this.endX = endX
        // this.setData({
        //   endX: endX
        // })
        //计算手指触摸偏移剧距离
        var moveX = this.startX - this.endX
        //向左移动
        //loop
        if (moveX > 30 ) {
          // console.log('move left')

          // this.moveRight();
          // this.selected++
          this.selected = (this.selected + 1) % this.images.length


        }
        if (moveX < -30 ) {
          // console.log('move right')
          // this.moveLeft();
          // this.selected--
          this.selected = (this.selected - 1 + this.images.length) % this.images.length
        }
      }
    }
    watch = {
      selected(v , ov){
        // console.log('index' , v , 'old ov ' , ov)
      }
    }
    computed = {
      // getImageClass() {
      //   let index = this.index
      //   let cs = ''
      //   if(index == this.selected){
      //     cs = 'image-current'
      //   }else if(index == (this.selected + 1)){
      //     cs = 'image-next'
      //   }else if(index == (this.selected - 1)){
      //     cs = 'image-pre'
      //   }else if(index > (this.selected + 1)){
      //     cs = 'image-next-hidden'
      //   }else if(index < (this.selected - 1)){
      //     cs = 'image-pre-hidden'
      //   }
      //
      //   return cs
      // },
      loopImages() {
        let res = []
        let i = this.selected
        let l = this.images.length
        res.push(this.images[(i - 2 + l ) % l])
        res.push(this.images[(i - 1 + l ) % l])
        res.push(this.images[(i + l ) % l])
        res.push(this.images[(i  + 1 + l ) % l])
        res.push(this.images[(i  + 2 + l ) % l])


        console.log('images' , (i - 2 + l ) % l , (i - 1 + l ) % l , (i + l ) % l , (i  + 1 + l ) % l , (i  + 2 + l ) % l)
        return res
      }
    }
    events = {}
    props = {
      images: {
        type: Array,
        default: []
      },
      selected: {
        type: Number,
        default: 0,
        twoWay: true
      },
      locked:String

    }
    // Other properties
  }
</script>

<style lang="scss">
  /*
  H:300
  hpre:255
  */
  .carousel-swiper {
    display: flex;
    flex-direction: row;
    align-items: center;
    position: relative;
    display: flex;
    align-items: center;
    overflow: hidden;





    .prev-btn{
      position: absolute;
      width: 80rpx;
      height: 80rpx;
      left: 18.13%;
      top:50%;
      transform: translate(-50% , -50%);
    }
    .next-btn{
      position: absolute;
      width: 80rpx;
      height: 80rpx;
      right: 18.13%;
      top:50%;
      transform: translate(50% , -50%);
    }
    .image-wrap{
      display: flex;
      position: absolute;
      height: 100%;
      transition:all 0.5s ease-in-out;
      border-radius: 20rpx;
      overflow: hidden;

      .not-current{
        background-color: #4C4B41;
        opacity: 0.5;
      }
      .step-content{

        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        height: 100%;
        left:0;
        right: 0;
        top:0;
        bottom:0;
        .step-wrap{
          white-space: nowrap;
          color:white;
          font-size: 24rpx;
          margin-top: 76rpx;
          >view{
            display: inline-block;
          }
          .step{
            font-size: 50rpx;
            font-weight: bold;
            margin-right: 6rpx;
          }
        }

        .lock{
          width: 40rpx;
          height: 40rpx;
        }
        &.locked{
          background-color: #4C4B41;
          opacity: 0.8;
        }
      }

      .bg{
        flex:1;
        height: 100%;
      }
      .icon{
        position: absolute;
        height: 142rpx;
        width: 122rpx;
        top:22rpx;
        left:50%;
        transform: translateX(-50%);
      }

      .step-content{
        position: absolute;
      }
    }
    .image-current{
      width:59.5%;
      left:19.73%;
    }

    .image-pre{
      width:19.56%;
      transform: scale(0.85);
      left:0;
    }

    .image-pre-hidden{
      left:-100%;
      width:19.56%;
      transform: scale(0.85);
    }
    .image-next{
      width:19.56%;
      transform: scale(0.85);
      left:80%;
    }
    .image-next-hidden{
      left:100%;
      width:19.56%;
      transform: scale(0.85);
    }
  }
</style>
